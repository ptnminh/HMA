// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id               String             @id @default(uuid())
  email            String
  moduleId         Int?               @map(name: "module_id")
  avatar           String?
  firstName        String?            @map(name: "first_name")
  phone            String?
  address          String?
  gender           Int?
  birthday         DateTime?
  lastName         String?            @map(name: "last_name")
  isInputPassword  Boolean            @default(true) @map(name: "is_input_password")
  password         String
  emailVerified    Boolean            @default(false) @map(name: "email_verified")
  emailVerifiedAt  DateTime?          @map(name: "email_verified_at")
  isDisabled       Boolean            @default(false) @map(name: "is_disabled")
  disabledAt       DateTime?          @map(name: "disabled_at")
  updatedAt        DateTime           @default(now()) @updatedAt @map(name: "updated_at")
  createdAt        DateTime           @default(now()) @map(name: "created_at")
  accounts         accounts[]
  groupChatMember  groupChatMember[]
  clinics          clinics[]
  userDeviceTokens userDeviceTokens[]
  staffs           staffs[]
  patients         patients[]
}

model userDeviceTokens {
  id        Int      @id @default(autoincrement())
  userId    String   @map(name: "user_id")
  token     String
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")
  users     users    @relation(fields: [userId], references: [id])

  @@map("user_device_tokens")
}

model accounts {
  id         String    @id @default(uuid())
  userId     String    @map(name: "user_id")
  provider   String
  key        String?
  avatar     String?
  disabledAt DateTime? @map(name: "disabled_at")
  isDisabled Boolean   @default(false) @map(name: "is_disabled")
  updatedAt  DateTime  @default(now()) @updatedAt @map(name: "updated_at")
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  user       users     @relation(fields: [userId], references: [id])
}

model clinicGroupRoles {
  id              Int               @id @default(autoincrement())
  name            String
  description     String?
  clinicId        String            @map(name: "clinic_id")
  isDisabled      Boolean           @default(false) @map(name: "is_disabled")
  disabledAt      DateTime?         @map(name: "disabled_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map(name: "updated_at")
  createdAt       DateTime          @default(now()) @map(name: "created_at")
  rolePermissions rolePermissions[]
  clinics         clinics           @relation(fields: [clinicId], references: [id])
  staffs          staffs[]

  @@map("clinic_group_roles")
}

model rolePermissions {
  id           Int              @id @default(autoincrement())
  roleId       Int              @map(name: "role_id")
  permissionId Int              @map(name: "permission_id")
  role         clinicGroupRoles @relation(fields: [roleId], references: [id])
  permission   options          @relation(fields: [permissionId], references: [id])

  @@map(name: "role_permissions")
}

model plans {
  id            Int             @id @default(autoincrement())
  planName      String          @map(name: "plan_name")
  currentPrice  Float?          @map(name: "current_price")
  duration      Float?
  description   String?         @db.Text
  isActive      Boolean         @default(true) @map(name: "is_activated")
  updatedAt     DateTime        @default(now()) @updatedAt @map(name: "updated_at")
  createdAt     DateTime        @default(now()) @map(name: "created_at")
  planOptions   planOptions[]
  subscriptions subscriptions[]
  planHistories planHistories[]
}

model options {
  id              Int               @id @default(autoincrement())
  optionName      String            @map(name: "option_name")
  description     String?           @db.Text
  isServiceOption Boolean           @default(false) @map(name: "is_service_option")
  isActive        Boolean           @default(true) @map(name: "is_activated")
  createdAt       DateTime          @default(now()) @map(name: "created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map(name: "updated_at")
  planOptions     planOptions[]
  rolePermissions rolePermissions[]
}

model planOptions {
  id        Int      @id @default(autoincrement())
  planId    Int      @map(name: "plan_id")
  optionId  Int      @map(name: "option_id")
  plan      plans    @relation(fields: [planId], references: [id])
  option    options  @relation(fields: [optionId], references: [id])
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  @@map(name: "plan_options")
}

model groupChats {
  id              Int               @id @default(autoincrement())
  groupName       String            @map(name: "group_name")
  maxMember       Int               @default(10) @map(name: "max_member")
  type            String?
  isActive        Boolean           @default(true) @map(name: "is_activated")
  createdAt       DateTime          @default(now()) @map(name: "created_at")
  updatedAt       DateTime          @default(now()) @updatedAt @map(name: "updated_at")
  groupChatMember groupChatMember[]

  @@map(name: "group_chats")
}

model groupChatMember {
  id          Int        @id @default(autoincrement())
  userId      String     @map(name: "user_id")
  groupChatId Int        @map(name: "group_chat_id")
  isAdmin     Boolean    @default(false) @map(name: "is_admin")
  joinedAt    DateTime?  @default(now()) @map(name: "joined_at")
  isDisabled  Boolean    @default(false) @map(name: "is_disabled")
  disabledAt  DateTime?  @map(name: "disabled_at")
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  updatedAt   DateTime   @default(now()) @updatedAt @map(name: "updated_at")
  groupChats  groupChats @relation(fields: [groupChatId], references: [id])
  users       users      @relation(fields: [userId], references: [id])

  @@map(name: "group_chat_member")
}

model clinics {
  id                    String                  @id @default(uuid())
  name                  String?
  phone                 String?
  email                 String?
  ownerId               String                  @map(name: "owner_id")
  address               String?
  logo                  String?
  lat                   Float?
  long                  Float?
  description           String?
  metadata              String?
  isActive              Boolean                 @default(true) @map(name: "is_activated")
  createdAt             DateTime                @default(now()) @map(name: "created_at")
  updatedAt             DateTime                @default(now()) @updatedAt @map(name: "updated_at")
  owner                 users                   @relation(fields: [ownerId], references: [id])
  subscriptions         subscriptions[]
  clinicGroupRoles      clinicGroupRoles[]
  clinicServices        clinicServices[]
  appointments          appointments[]
  clinicNews            clinicNews[]
  medicalSuppliers      medicalSuppliers[]
  category              category[]
  staffs                staffs[]
  patients              patients[]
  medicalSupplies       medicalSupplies[]
  medicalRecords        medicalRecords[]
  medicalRecordServices medicalRecordServices[]
  clinicStatistic       clinicStatistic[]
  investmentInvoice     investmentInvoice[]
}

model clinicNews {
  id        Int      @id @default(autoincrement())
  title     String?  @db.Text
  content   String?  @db.Text
  logo      String?
  clinicId  String   @map(name: "clinic_id")
  isShow    Boolean  @default(true) @map(name: "is_show")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")
  clinics   clinics  @relation(fields: [clinicId], references: [id])

  @@map(name: "clinic_news")
}

model medicalSuppliers {
  id           Int       @id @default(autoincrement())
  medicineName String?   @map(name: "medicine_name")
  expiry       String?
  stock        Int?
  note         String?
  vendor       String?
  unit         Float?
  description  String?
  address      String?
  phone        String?
  email        String?
  name         String?
  clinicId     String?   @map(name: "clinic_id")
  categoryId   Int?      @map(name: "category_id")
  expiredAt    DateTime? @map(name: "expired_at")
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  updatedAt    DateTime  @default(now()) @updatedAt @map(name: "updated_at")
  isDisabled   Boolean   @default(false) @map(name: "is_disabled")
  disabledAt   DateTime? @map(name: "disabled_at")
  clinics      clinics?  @relation(fields: [clinicId], references: [id])
  category     category? @relation(fields: [categoryId], references: [id])

  @@map(name: "medical_suppliers")
}

model category {
  id               Int                @id @default(autoincrement())
  name             String             @map(name: "category_name")
  type             Int                @map(name: "category_type")
  note             String?
  clinicId         String             @map(name: "clinic_id")
  description      String?
  createdAt        DateTime           @default(now()) @map(name: "created_at")
  updatedAt        DateTime           @default(now()) @updatedAt @map(name: "updated_at")
  isDisabled       Boolean            @default(false) @map(name: "is_disabled")
  disabledAt       DateTime?          @map(name: "disabled_at")
  clinics          clinics            @relation(fields: [clinicId], references: [id])
  medicalSuppliers medicalSuppliers[]
  clinicServices   clinicServices[]
  medicalSupplies  medicalSupplies[]
}

model subscriptions {
  id            String          @id @default(uuid())
  clinicId      String          @map(name: "clinic_id")
  planId        Int             @map(name: "current_plan_id")
  status        Int
  subcribedAt   DateTime        @default(now()) @map(name: "subcribed_at")
  expiredAt     DateTime?       @map(name: "expired_at")
  unSubcribedAt DateTime?       @map(name: "unsubcribed_at")
  createdAt     DateTime        @default(now()) @map(name: "created_at")
  updatedAt     DateTime        @default(now()) @updatedAt @map(name: "updated_at")
  isDisabled    Boolean         @default(false) @map(name: "is_disabled")
  disabledAt    DateTime?       @map(name: "disabled_at")
  clinics       clinics         @relation(fields: [clinicId], references: [id])
  plans         plans           @relation(fields: [planId], references: [id])
  planHistories planHistories[]
  invoices      invoices[]
}

model planHistories {
  id            Int           @id @default(autoincrement())
  subcriptionId String        @map(name: "supcription_id")
  planId        Int           @map(name: "plan_id")
  startDate     DateTime      @default(now()) @map(name: "start_date")
  endDate       DateTime?     @map(name: "end_date")
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updateAt      DateTime      @default(now()) @updatedAt()
  plans         plans         @relation(fields: [planId], references: [id])
  supcriptions  subscriptions @relation(fields: [subcriptionId], references: [id])
  invoices      invoices[]

  @@map(name: "plan_histories")
}

model invoices {
  id            Int           @id @default(autoincrement())
  planHistoryId Int           @map(name: "plan_history_id")
  subcriptionId String        @map(name: "subcription_id")
  customerData  String?       @map(name: "customer_data")
  startDate     DateTime      @default(now()) @map(name: "start_date")
  endDate       DateTime?     @map(name: "end_date")
  description   String        @db.Text
  amount        Int
  createdAt     DateTime      @default(now()) @map(name: "created_at")
  updatedAt     DateTime      @default(now()) @updatedAt() @map("updated_at")
  dueAt         DateTime?     @map(name: "due_at")
  paidAt        DateTime?     @map(name: "paid_at")
  isDisabled    Boolean?      @default(false) @map(name: "is_disabled")
  disabledAt    Boolean       @map("disabled_at")
  supcriptions  subscriptions @relation(fields: [subcriptionId], references: [id])
  planHistories planHistories @relation(fields: [planHistoryId], references: [id])
}

model staffs {
  id                    Int                     @id() @default(autoincrement())
  specialize            String?
  experience            Int?
  gender                Int?
  phoneNumber           String?
  address               String?
  description           String?                 @db.Text
  roleId                Int?                    @map(name: "role_id")
  clinicId              String?                 @map(name: "clinic_id")
  isAcceptInvite        Boolean                 @default(true) @map(name: "is_accept_invite")
  uniqueId              String?                 @map(name: "unique_id")
  userId                String?                 @map(name: "user_id")
  createdAt             DateTime                @default(now()) @map(name: "created_at")
  updatedAt             DateTime                @default(now()) @updatedAt() @map("updated_at")
  isDisabled            Boolean                 @default(false) @map(name: "is_disabled")
  disabledAt            DateTime?               @map("disabled_at")
  staffSchedules        staffSchedules[]
  appointments          appointments[]
  staffServices         staffServices[]
  clinics               clinics?                @relation(fields: [clinicId], references: [id])
  role                  clinicGroupRoles?       @relation(fields: [roleId], references: [id])
  users                 users?                  @relation(fields: [userId], references: [id])
  medicalRecords        medicalRecords[]
  medicalRecordServices medicalRecordServices[]
  investmentInvoice     investmentInvoice[]
}

model appointments {
  id             Int             @id @default(autoincrement())
  startTime      String?
  endTime        String?
  date           String?
  status         String
  clinicId       String          @map(name: "clinic_id")
  serviceId      Int?            @map(name: "service_id")
  patientId      Int?
  doctorId       Int?
  description    String?
  createAt       DateTime        @default(now()) @map(name: "created_at")
  updateAt       DateTime        @default(now()) @updatedAt @map(name: "updated_at")
  isDisabled     Boolean         @default(false) @map(name: "is_disabled")
  disabledAt     DateTime?       @map(name: "disabled_at")
  patients       patients?       @relation(fields: [patientId], references: [id])
  staffs         staffs?         @relation(fields: [doctorId], references: [id])
  clinics        clinics         @relation(fields: [clinicId], references: [id])
  clinicServices clinicServices? @relation(fields: [serviceId], references: [id])
}

model staffSchedules {
  id         Int       @id @default(autoincrement())
  staffId    Int       @map(name: "staff_id")
  startTime  String
  endTime    String
  day        Int
  createAt   DateTime  @default(now()) @map(name: "created_at")
  updateAt   DateTime  @default(now()) @updatedAt @map(name: "updated_at")
  isDisabled Boolean   @default(false) @map(name: "is_disabled")
  disabledAt DateTime? @map(name: "disabled_at")
  staffs     staffs    @relation(fields: [staffId], references: [id])

  @@map("staff_schedule")
}

model clinicServices {
  id                    Int                     @id @default(autoincrement())
  clinicId              String
  serviceName           String                  @map(name: "service_name")
  price                 Int
  categoryId            Int?                    @map(name: "category_id")
  description           String?
  createdAt             DateTime                @default(now()) @map(name: "created_at")
  updatedAt             DateTime                @default(now()) @updatedAt @map(name: "updated_at")
  isDisabled            Boolean                 @default(false) @map(name: "is_disabled")
  deletedAt             DateTime?               @map(name: "deleted_at")
  staffServices         staffServices[]
  clinics               clinics                 @relation(fields: [clinicId], references: [id])
  category              category?               @relation(fields: [categoryId], references: [id])
  appointments          appointments[]
  clinicRequestServices clinicRequestServices[]
  medicalRecordServices medicalRecordServices[]

  @@map("clinic_services")
}

model patients {
  id                  Int                 @id @default(autoincrement())
  bloodGroup          String?             @map("blood_group")
  anamnesis           String?
  uniqueId            String?             @map("unique_id")
  idCard              String?             @map("id_card")
  healthInsuranceCode String?             @map("health_insurance_code")
  clinicId            String?             @map("clinic_id")
  userId              String?             @map("user_id")
  deletedAt           DateTime?           @map(name: "deleted_at")
  appointments        appointments[]
  patient             users?              @relation(fields: [userId], references: [id])
  clinics             clinics?            @relation(fields: [clinicId], references: [id])
  medicalRecords      medicalRecords[]
  investmentInvoice   investmentInvoice[]
}

model medicalSupplies {
  id                   Int                    @id @default(autoincrement())
  medicineName         String                 @map(name: "medicine_name")
  stock                Int?
  price                Float?
  expiredAt            DateTime?
  expiry               DateTime?
  vendor               String?
  description          String?
  isDeleted            Boolean                @default(false) @map(name: "is_deleted")
  unit                 String?
  clinicId             String?                @map(name: "clinic_id")
  note                 String?
  categoryId           Int?                   @map(name: "category_id")
  isDisabled           Boolean                @default(false) @map(name: "is_disabled")
  category             category?              @relation(fields: [categoryId], references: [id])
  clinics              clinics?               @relation(fields: [clinicId], references: [id])
  usingMedicalSupplies usingMedicalSupplies[]

  @@map("medical_supplies")
}

model staffServices {
  id              Int            @id @default(autoincrement())
  createdAt       DateTime       @default(now()) @map(name: "created_at")
  updatedAt       DateTime       @default(now()) @updatedAt @map(name: "updated_at")
  isDisabled      Boolean        @default(false) @map(name: "is_disabled")
  disabledAt      DateTime?      @map(name: "disabled_at")
  staffId         Int            @map(name: "staff_id")
  clinicServiceId Int            @map(name: "clinic_service_id")
  clinicServices  clinicServices @relation(fields: [clinicServiceId], references: [id])
  staffs          staffs         @relation(fields: [staffId], references: [id])

  @@map("staff_service")
}

model medicalRecords {
  id                    Int                     @id @default(autoincrement())
  patientId             Int
  doctorId              Int
  clinicId              String
  dateCreated           DateTime                @map(name: "date_created")
  height                Float?
  weight                Float?
  bloodPressure         Float?                  @map(name: "blood_pressure")
  temperature           Float?
  diagnose              String?
  result                String?
  examinationStatus     Int?                    @map(name: "examination_status")
  paymentStatus         Int?                    @map(name: "payment_status")
  note                  String?                 @db.Text
  createdAt             DateTime                @default(now()) @map(name: "created_at")
  updatedAt             DateTime                @default(now()) @updatedAt @map(name: "updated_at")
  patient               patients                @relation(fields: [patientId], references: [id])
  doctor                staffs                  @relation(fields: [doctorId], references: [id])
  clinic                clinics                 @relation(fields: [clinicId], references: [id])
  clinicRequestServices clinicRequestServices[]
  medicalRecordServices medicalRecordServices[]
  prescriptionDetail    prescriptionDetail[]
  investmentInvoice     investmentInvoice?
  usingMedicalSupplies  usingMedicalSupplies[]

  @@map("medical_records")
}

model medicalRecordServices {
  id              Int                    @id @default(autoincrement())
  medicalRecordId Int                    @map(name: "medical_record_id")
  clinicId        String                 @map(name: "clinic_id")
  clinicServiceId Int                    @map(name: "clinic_service_id")
  doctorId        Int?                   @map(name: "doctor_id")
  serviceResult   String?                @map(name: "service_result") @db.Text
  serviceName     String?                @map(name: "service_name")
  amount          Float?
  paymentStatus   Int?                   @map(name: "payment_status")
  returnCode      String?                @unique @map(name: "return_code")
  createdAt       DateTime               @default(now()) @map(name: "created_at")
  updatedAt       DateTime               @default(now()) @updatedAt @map(name: "updated_at")
  clinic          clinics                @relation(fields: [clinicId], references: [id])
  medicalRecord   medicalRecords         @relation(fields: [medicalRecordId], references: [id])
  code            clinicRequestServices? @relation(fields: [returnCode], references: [code])
  clinicServices  clinicServices         @relation(fields: [clinicServiceId], references: [id])
  doctor          staffs?                @relation(fields: [doctorId], references: [id])

  @@map("medical_record_services")
}

model clinicRequestServices {
  code                  String                 @id
  serviceName           String                 @map(name: "service_name")
  clinicServiceId       Int                    @map(name: "service_id")
  medicalRecordId       Int                    @map(name: "medical_record_id")
  serviceResult         String?                @map(name: "service_result") @db.Text
  createdAt             DateTime               @default(now()) @map(name: "created_at")
  updatedAt             DateTime               @default(now()) @updatedAt @map(name: "updated_at")
  medicalRecord         medicalRecords         @relation(fields: [medicalRecordId], references: [id])
  medicalRecordServices medicalRecordServices?
  clinicServices        clinicServices         @relation(fields: [clinicServiceId], references: [id])

  @@map("clinic_request_services")
}

model clinicStatistic {
  id                   Int      @id @default(autoincrement())
  clinicId             String   @map(name: "clinic_id")
  date                 String?  @map(name: "date")
  numberOfPatients     Int      @default(0) @map(name: "number_of_patients")
  revenue              Float    @default(0)
  numberOfAppointments Int      @default(0) @map(name: "number_of_appointments")
  createdAt            DateTime @default(now()) @map(name: "created_at")
  updatedAt            DateTime @default(now()) @updatedAt @map(name: "updated_at")
  clinics              clinics  @relation(fields: [clinicId], references: [id])

  @@unique([clinicId, date])
  @@map("clinic_statistic")
}

model prescriptionDetail {
  id              Int            @id @default(autoincrement())
  medicineName    String         @map(name: "medicine_name")
  dosage          Int?
  unit            String?
  duration        String?
  usingTime       String?        @map(name: "using_time")
  doseInterval    String?        @map(name: "dose_interval")
  note            String?
  medicalRecordId Int            @map(name: "medical_record_id")
  createdAt       DateTime       @default(now()) @map(name: "created_at")
  updatedAt       DateTime       @default(now()) @updatedAt @map(name: "updated_at")
  medicalRecord   medicalRecords @relation(fields: [medicalRecordId], references: [id])

  @@map("prescription_detail")
}

model investmentInvoice {
  id              Int             @id @default(autoincrement())
  clinicId        String          @map(name: "clinic_id")
  patientId       Int             @map(name: "patient_id")
  medicalRecordId Int             @unique @map(name: "medical_record_id")
  invoiceDate     String?         @map(name: "invoice_date")
  description     String?         @db.Text
  status          Int             @default(0)
  cashierId       Int?            @map(name: "cashier_id")
  totalPayment    Float?          @map(name: "total_payment")
  createdAt       DateTime        @default(now()) @map(name: "created_at")
  updatedAt       DateTime        @default(now()) @updatedAt @map(name: "updated_at")
  clinic          clinics         @relation(fields: [clinicId], references: [id])
  patient         patients        @relation(fields: [patientId], references: [id])
  medicalRecord   medicalRecords  @relation(fields: [medicalRecordId], references: [id])
  invoiceDetail   invoiceDetail[]
  cashier         staffs?         @relation(fields: [cashierId], references: [id])

  @@map("investment_invoice")
}

model invoiceDetail {
  id                Int               @id @default(autoincrement())
  invoiceId         Int               @map(name: "invoice_id")
  content           String            @db.Text
  amount            Float
  createdAt         DateTime          @default(now()) @map(name: "created_at")
  updatedAt         DateTime          @default(now()) @updatedAt @map(name: "updated_at")
  investmentInvoice investmentInvoice @relation(fields: [invoiceId], references: [id])

  @@map("invoice_detail")
}

model usingMedicalSupplies {
  id              Int             @id @default(autoincrement())
  medicalSupplyId Int             @map(name: "medical_supply_id")
  medicalRecordId Int             @map(name: "clinic_id")
  quantity        Int
  createdAt       DateTime        @default(now()) @map(name: "created_at")
  updatedAt       DateTime        @default(now()) @updatedAt @map(name: "updated_at")
  medicalSupply   medicalSupplies @relation(fields: [medicalSupplyId], references: [id])
  medicalRecord   medicalRecords  @relation(fields: [medicalRecordId], references: [id])

  @@map("using_medical_supplies")
}
